name: Feature Pipeline
on:
  push:
    branches
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    # outputs:
    #   env-name: ${{ steps.env-name.outputs.environment }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup node 12
        uses: actions/setup-node@v2
        with:
          node-version: 12.x
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: SAM Validate
        run: |
          sam validate
      - name: Configure variables
        shell: bash
        id: vars
        env:
          REPO: ${{ github.repository }}
          HASH: ${{ github.sha }}
          REF: ${{ github.ref }}
        run: |
          # Set variables
          BRANCH=${REF#refs/heads/}
          REPOSITORY=`echo $REPO | tr "/" "-"`
          ENVIRONMENT=$BRANCH-$REPOSITORY-${{ secrets.AWS_REGION }}-1234
          # In this step we are setting variables and persistenting them
          # into the environment so that they can be utilized in other steps
          echo "::set-output name=branch::$BRANCH"
          echo "::set-output name=repository::$REPOSITORY"
          echo "::set-output name=environment::$ENVIRONMENT"
          # Output variables to ensure their values are set correctly when ran
          echo "The region is ${{ secrets.AWS_REGION }}"
          echo "The repository is $REPOSITORY"
          echo "The environment is $ENVIRONMENT"
          echo "The branch is $BRANCH"
      - name: Install Dependencies
        run: |
          npm ci
      - name: SAM Build
        run: |
          sam build
      - name: Run lint 
        run: |
          npm run lint
      - name: Run unit tests
        run: |
          npm run test
      - name: SAM Package
        run: |
          # Create S3 Bucket to store code
          aws s3 mb s3://${{ steps.vars.outputs.environment }}
          # Run SAM Package
          sam package \
            --output-template-file packaged.yaml \
            --s3-bucket ${{ steps.vars.outputs.environment }}
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: package
          path: packaged.yaml
 
  deploy:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      env-name: ${{ steps.env-name.outputs.environment }}
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: package
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Configure variables
        shell: bash
        id: vars
        env:
          REPO: ${{ github.repository }}
          HASH: ${{ github.sha }}
          REF: ${{ github.ref }}
        run: |
          # Set variables
          BRANCH=${REF#refs/heads/}
          REPOSITORY=`echo $REPO | tr "/" "-"`
          ENVIRONMENT=$BRANCH-$REPOSITORY-${{ secrets.AWS_REGION }}
          # In this step we are setting variables and persistenting them
          # into the environment so that they can be utilized in other steps
          echo "::set-output name=branch::$BRANCH"
          echo "::set-output name=repository::$REPOSITORY"
          echo "::set-output name=environment::$ENVIRONMENT"
          # Output variables to ensure their values are set correctly when ran
          echo "The region is ${{ secrets.AWS_REGION }}"
          echo "The repository is $REPOSITORY"
          echo "The environment is $ENVIRONMENT"
          echo "The branch is $BRANCH"
      - name: Feature Deploy
        run: |
          # Run SAM Deploy
          sam deploy --template-file packaged.yaml \
            --stack-name ${{ steps.vars.outputs.environment }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM
      - name: Run integration tests
        run: |
          echo "Running Integration Tests"
      - name: Feature Teardown
        run: |
          # Run CFN Delete Stack
          aws cloudformation delete-stack \
            --stack-name ${{ steps.vars.outputs.environment }}
  
  release:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: package
      - name: Archive site content
        uses: thedoctor0/zip-release@master
        with:
          filename: release.zip
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v1.0.${{ github.run_number }}
          release_name: Release v1.0.${{ github.run_number }}
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./release.zip
          asset_name: release-v1.0.${{ github.run_number }}.zip
          asset_content_type: application/zip

      # - name: Bump version and push tag
      #   id: tag_version
      #   uses: mathieudutour/github-tag-action@v5.2
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: Release ${{ github.ref }}
      #     body: |
      #       Changes in this Release
      #       - First Change
      #       - Second Change
      #     draft: false
      #     prerelease: false